
BOARD STATE
  Hybrid approach: Piece list for move generation with separate board square representation for lookups.  
GAME TREE
  Position object used as node in search tree
  Evaluation score stored in node
  edges to other nodes generated based on move list.
SEARCHING / TRAVERSAL ----
  Iterative Deepening
    =>  MTD(f) for scope narrowing
        =>  Alpha-Beta Pruning with memoization
            =>  Transposition hash table for memoization
EVALUATION ----
  Material balance
  Mobility balance
  Piece Square Tables


Move Generation benchmarking (4-ply maximal tree, 197742 nodes)
  baseline: 46.596299 seconds
  12/30/13: 35.324076 seconds
  1/5/14: 24.660283 seconds
  king safety 1/6/14: 25.213673 seconds
  legal copy/make: 33.068109 seconds
  incremental update: 9.475452 seconds
  iterative move gen and king saftey: 7.3749 seconds (26750 NPS)
  2/10/14 pseudolegal with king-loss checking: 3.419017 seconds (57835 NPS)

Search benchmarking (Win at Chess test suite):

  2/25/14, MTD-f step

  ------ Aggregate Search Performance -------

  DEPTH | SCORE | PASSES | M_NODES | Q_NODES | EVALS  | MEMORY | EFF_BRANCHING      | AVG_EFF_BRANCHING  | ALL_NODES
  ------|-------|--------|---------|---------|--------|--------|--------------------|--------------------|----------
  1     |       | 4120   | 158474  | 26102   | 147223 | 13248  | 0.0                | 0.0                | 184576   
  2     |       | 1541   | 88044   | 94042   | 41798  | 42481  | 0.9865096220527045 | 0.9865096220527045 | 182086   
  3     |       | 802    | 589349  | 586667  | 144154 | 166016 | 6.4585745197324345 | 2.524172321467073  | 1176016  
  4     |       | 2564   | 1410354 | 1162667 | 572604 | 169976 | 2.1879132596835418 | 2.4067041134359775 | 2573021  

  Total AI score: 47/300 (15.666666666666668%)
  0.7628975233333334 seconds/position at depth 4
  nodes: 4115699,  evals: 905779,  avg. branching: 2.4067041134359775


  3/7/14, MTD-f
  
  ------ Aggregate Search Performance -------

  DEPTH | SCORE | PASSES | M_NODES | Q_NODES | EVALS   | MEMORY | EFF_BRANCHING      | AVG_EFF_BRANCHING  | ALL_NODES
  ------|-------|--------|---------|---------|---------|--------|--------------------|--------------------|----------
  1     |       | 3142   | 23231   | 18380   | 38784   | 11439  | 0.0                | 0.0                | 41611    
  2     |       | 2286   | 70762   | 62142   | 127383  | 21486  | 3.1939631347480235 | 3.1939631347480235 | 132904   
  3     |       | 674    | 363624  | 163890  | 503847  | 58831  | 3.969135616685728  | 3.5605158104563412 | 527514   
  4     |       | 684    | 904204  | 353180  | 1208359 | 130591 | 2.383603089207111  | 3.1147265555903036 | 1257384  

  Total AI score: 67/300 (22.333333333333332%)
  1.1498487733333334 seconds/search at depth 4
  N: 1959413; E: 1878373; B: 3.1147265555903036; Efficiency: 7.170238842716231



Current Issues ----



To Do ----

  Refactor utilities.rb

  Prevent king capture in SEE
  
  Refactor for readability where required, comment ambiguous code.
  
  Complete review of all files in ./lib/

  create readme



Possible Enhancements to Add ----

  Add very basic 'King Tropism' to evaluation:
    - create a pre-filled 64x64 table holding the chebyshev distance for each to/from square combination.
    - assign a multiplier value for each piece type.
    - keep a total king_tropism value incrementally updated (for both sides) on make/unmake.
    - add 'net king tropism' to evaluation total.

  Add aging scheme for removal of old TT entries

  Integrate PV extractor into Search for analytics.

  Add node-count based TT replacement scheme

  Move ordering enhancements:
    -Killer Moves
    -Non-captures sorted by History Heuristic
    -At root, use TT entry result if available, otherwise use q-search.

  Additional search extensions:
    -Principal Variation
    -pawn promotions





  






