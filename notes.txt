
BOARD STATE
  Hybrid approach: Piece list for move generation with separate board square representation for lookups.  
GAME TREE
  Position object used as node in search tree
  Evaluation score stored in node
  edges to other nodes generated based on move list.
SEARCHING / TRAVERSAL ----
  Iterative Deepening
    =>  MTD(f) for scope narrowing
        =>  Alpha-Beta Pruning with memoization
            =>  Transposition hash table for memoization
EVALUATION ----
  Material balance
  Mobility balance
  Piece Square Tables


Current Issues ----

Move Generation benchmarking (4-ply maximal tree, 197742 nodes)
  Using Location object - baseline: 46.596299 seconds
                          after refcatoring 12/30/13: 35.324076 seconds
                          after refactoring 1/5/14: 24.660283 seconds
                          after adding king safety 1/6/14: 25.213673 seconds
                          after ensuring legal move generation: 33.068109 seconds
                          after switching to incremental update: 9.475452 seconds

To Do ----

  Add separate PSTs for early- and late-game.

  Add Killer Heuristic to move ordering.
  Allow incremental calculation of hash values based on previous move of the Transposition Table.

  Principal Variation - 


  Explore adding search extensions to "interesting" branches:
    -checks
    -moves with MVV-LVA ratio greater than 2
    -pawn promotions

  If capture or pawn move, reset halfmove_clock.  If any other move, increment halfmove_clock by 1.



  Add en-passant information to hashing:
  
  MAKE enp move example:
                      move.make
  pos.enp => b4       # an old enp_target exists prior to making move
  move.enp = b4       # original enp_target saved in move object (for make/unmake)
  pos.enp = nil       # All moves start with removal of existing en_passant key
    -XOR b4           # XOR out the old enp_target

                      @strategy.make
  pos.enp = c4        # Set enp_target to new target square
    -XOR c4           # XOR in the new enp_target


  UNMAKE
                      @strategy.unmake
  pos.enp = nil       # remove the new enp_target
    -XOR c4           # XOR out the new enp_target

                      move.unmake
  pos.enp = move.enp  # add back the previous enp_target value
    -XOR b4           # XOR in the old enp_target


  in move hash:
    ^ c4 ^ b4







