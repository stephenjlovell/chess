
BOARD STATE
  Hybrid approach: Piece list for move generation with separate board square representation for lookups.  
GAME TREE DATA STRUCTURE
  Position object used as node in search tree
  Evaluation score stored in node
  edges to other nodes generated based on move list.
SEARCHING / TRAVERSAL ----
  Iterative Deepening
    =>  MTD(f) for scope narrowing
        =>  Alpha-Beta Pruning with memoization
            =>  Transposition hash table for memoization
EVALUATION ----
  Weighted pattern matching

Current Issues ----

  AI does not always select obvious best moves - does not always capture expensive units except via pawns.
  MTD(f) based search stack searching far fewer nodes than expected.


Move Generation benchmarking (4-ply maximal tree, 197742 nodes)
  Using Location object - baseline: 46.596299 seconds
                          after refcatoring 12/30/13: 35.324076 seconds
                          after refactoring 1/5/14: 24.660283 seconds
                          after adding king safety 1/6/14: 25.213673 seconds

To Do ----


  King Safety -
    there currently is nothing preventing AI from moving INTO check...



  Add separate PSTs for early- and late-game.
  Handle king_in_check? in board object
  Add Killer Heuristic to move ordering.
  Allow incremental calculation of hash values based on previous move of the Transposition Table.

  Add king_in_check penalty during move evaluation










