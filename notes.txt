
Move Generation benchmarking (4-ply maximal tree, 197742 nodes)
  baseline: 46.596299 seconds
  12/30/13: 35.324076 seconds
  1/5/14: 24.660283 seconds
  king safety 1/6/14: 25.213673 seconds
  legal copy/make: 33.068109 seconds
  incremental update: 9.475452 seconds
  iterative move gen and king saftey: 7.3749 seconds (26750 NPS)
  2/10/14 pseudolegal with king-loss checking: 3.419017 seconds (57835 NPS)

Search benchmarking (Win at Chess test suite):

  2/25/14, MTD-f step

    Total AI score: 47/300 (15.666666666666668%)
    0.7628975233333334 seconds/position at depth 4
    nodes: 4115699,  evals: 905779,  avg. branching: 2.4067041134359775

  3/7/14, MTD-f
    
    Total AI score: 67/300 (22.333333333333332%)
    1.1498487733333334 seconds/search at depth 4
    N: 1959413; E: 1878373; B: 3.1147265555903036; Efficiency: 7.170238842716231

  3/9/14, MTD-f after adding King Tropism heuristic to evaluation.

    Total AI score: 75/300 (25.0%)
    17.46751890666667 seconds/search at depth 6
    N: 33422508; E: 31119757; B: 3.0735751357459287; Efficiency: 8.133850286998996

  3/13/14 MTD-f after separating extensions from search depth:

    Total AI score: 90/300 (30.0%)
    14.399493723333332 seconds/search at depth 6
    N: 24107130; E: 22228973; B: 2.7898043965493544; Efficiency: 10.753442082572642

  after fixing bug in incremental update of material:

    Total AI score: 102/300 (34.0%)
    18.44492197 seconds/search at depth 6
    N: 31562518; E: 29380777; B: 3.0044842186355063; Efficiency: 11.316418235487081

  after adding incremental update of king safety:

    Total AI score: 106/300 (35.333333333333336%)
    15.703747 seconds/search at depth 6
    N: 30680709; E: 28613180; B: 3.5227516316816816; Efficiency: 10.030038171174164

  3/14/14 after adding generation of non-capture promotions in q-search:

    Total AI score: 86/300 (28.666666666666668%)
    0.9265735100000001 seconds/search at depth 4
    N: 1710167; E: 1655917; B: 3.1861230327014276; Efficiency: 8.997350815533629

    Total AI score: 107/300 (35.66666666666667%)
    18.160272170000002 seconds/search at depth 6
    N: 36096529; E: 33523583; B: 3.747370862572797; Efficiency: 9.517784061057503

  3/20/14 after switching to new move ordering scheme:

    Total AI score: 88/300 (29.333333333333332%)
    0.76810844 seconds/search at depth 4
    N: 1396254; E: 1323369; B: 2.9950407724802943; Efficiency: 9.793967949571988

    Total AI score: 102/300 (34.0%)
    15.215443256666667 seconds/search at depth 6
    N: 27655659; E: 24905056; B: 3.619308242656125; Efficiency: 9.394060334316316

  3/21/14 after fixing bug in ETC:

    Total AI score: 91/300 (30.333333333333336%)
    0.7714771333333333 seconds/search at depth 4
    N: 1365881; E: 1296587; B: 2.954104226693423; Efficiency: 10.268200105886558

  3/25/14 MTD(f)-Step after switching to separate depth and count for upper/lower TT bounds 

    Total AI score: 112/300 (37.333333333333336%)
    14.344271433333333 seconds/search at depth 6
    N: 27578012; E: 24805769; B: 3.547836633294197; Efficiency: 10.522844536578623

  3/27/14 MTD(f)-Step 

    Total AI score: 107/300 (35.66666666666667%)
    13.920589356666666 seconds/search at depth 6
    N: 26496960; E: 23843666; B: 3.6750744892181237; Efficiency: 9.705018706778592

  4/7/14 MTD(f)-Step after eliminating 'exact' TT entries

    Total AI score: 91/300 (30.333333333333336%)
    0.7078510666666666 seconds/search at depth 4
    N: 1336395; E: 1267669; B: 2.98279485742205; Efficiency: 10.169433294366621

    Total AI score: 110/300 (36.666666666666664%)
    13.390832373333332 seconds/search at depth 6
    N: 25652048; E: 23067922; B: 3.5953735524979513; Efficiency: 10.198291257160701

  4/9/14 MTD(f)-Step after replacing PSTs

    Total AI score: 94/300 (31.333333333333336%)
    0.70220744 seconds/search at depth 4
    N: 1329152; E: 1261613; B: 2.975097929974432; Efficiency: 10.531866200990102

    Total AI score: 114/300 (38.0%)
    13.538827173333335 seconds/search at depth 6
    N: 25666314; E: 23056520; B: 3.597718489628773; Efficiency: 10.562249411548871



Performance notes - 

  Piece Square Table testing
    
  BASE-  3817758  46/150

    P -  3755495  46/150   +
    N -  3829149  45/150   --
    B -  3828630  46/150   -
    R -  3807924  45/150   +/-
    Q -  3812257  47/150   ++
    K -  3821202  46/150   -

    All  3793012  47/150   ++

Current Issues ----

To Do ----


  Without piece list, updating tropism score will require looping over opposing bitboards to sum tropism
  bonuses.  Migrate tropism module and Evaluation::king_tropism to C.

  Replace attack.rb with bitboard-based 'can_attack(square)'' and 'is_attacked_by(square)' methods in C.
  
  Create 'attacks_to(square)' method in attack.c to find all attacking squares (incl. hidden attackers). Write an iterative SEE(sboard, sq) implementation in C that uses this function to get the SEE score for an attack.

  Create separate move generators for checks and check evasions. This will require a new attack.c module.

  Refactor utilities

  Create readme









Possible Enhancements to Add ----

  
  -Create a threat map showing where enemy king can be attacked from. Incrementally update map on make/unmake.
    Use to create a 'gives check' move generator. 
    Use to efficiently generate moves that give check while in q-search (up to some maximum number of checks between 4-7).
    Attack map could be used to substantially speed up board.evades_check? method.

  -Extend search on 'winning' promotions

  -At root, TT entries could be used for more accurate move ordering. Entry value would be used if available, 
   otherwise q-search could be used to establish an initial entry.  This would reduce branching factor and might improve strength,
   revealing beneficial lines that might otherwise have been cut off.






