
BOARD STATE
  Hybrid approach: Piece list for move generation with separate board square representation for lookups.  
GAME TREE
  Position object used as node in search tree
  Evaluation score stored in node
  edges to other nodes generated based on move list.
SEARCHING / TRAVERSAL ----
  Iterative Deepening
    =>  MTD(f) for scope narrowing
        =>  Alpha-Beta Pruning with memoization
            =>  Transposition hash table for memoization
EVALUATION ----
  Material balance
  Mobility balance
  Piece Square Tables


Move Generation benchmarking (4-ply maximal tree, 197742 nodes)
  baseline: 46.596299 seconds
  12/30/13: 35.324076 seconds
  1/5/14: 24.660283 seconds
  king safety 1/6/14: 25.213673 seconds
  legal copy/make: 33.068109 seconds
  incremental update: 9.475452 seconds
  iterative move gen and king saftey: 7.3749 seconds (26750 NPS)
  2/10/14 pseudolegal with king-loss checking: 3.419017 seconds (57835 NPS)

Current Issues ----

  Infinite loop when human player checkmates AI (!)


  Positions from which AI makes blunders: 
    allows queen to die:
    rnb1kbnr/ppp2ppp/3p4/4p3/7q/2N3P1/PPPPPP1P/R1BQKBNR b KQkq - 0 1



To Do ----


  Use a ruby binding to google sparse hash library to replace Hash in TT.


  calculate @own_material, @enemy_material when moves are created => use change in adjusted material as a move ordering heuristic for non-captures.

  
  Add hashing of castling rights

  Internal Iterative Deepening (IID) for non-PV nodes

  Pruning:
    -Null move pruning (null move heuristic)

  Move ordering (priority high to low):
    -PV move
    -Hash Move
    -Killer Moves
    -Captures sorted by MVV-LVA
    -Non-captures sorted by History Heuristic

  Search extensions:
    -Principal Variation
    -checks
    -captures with MVV-LVA ratio greater than 1.5
    -pawn promotions

  Add separate PSTs for early- and late-game in Evaluation module.





  






