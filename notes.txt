
Move Generation benchmarking (4-ply maximal tree, 197742 nodes)
  baseline: 46.596299 seconds
  12/30/13: 35.324076 seconds
  1/5/14: 24.660283 seconds
  king safety 1/6/14: 25.213673 seconds
  legal copy/make: 33.068109 seconds
  incremental update: 9.475452 seconds
  iterative move gen and king saftey: 7.3749 seconds (26750 NPS)
  2/10/14 pseudolegal with king-loss checking: 3.419017 seconds (57835 NPS)

Search benchmarking (Win at Chess test suite):

  4/9/14 Baseline, ruby_only:

    Total AI score: 94/300 (31.333333333333336%)
    0.70220744 seconds/search at depth 4
    N: 1329152; E: 1261613; B: 2.975097929974432; Efficiency: 10.531866200990102

    Total AI score: 114/300 (38.0%)
    13.538827173333335 seconds/search at depth 6
    N: 25666314; E: 23056520; B: 3.597718489628773; Efficiency: 10.562249411548871


  5/4/14 After debugging attack.c

    Total AI score: 99/300 (33.0%)
    0.15935090666666668 seconds/search at depth 4
    N: 1913014; E: 1783802; B: 3.195094607130799; Efficiency: 10.328332665439932

    Total AI score: 122/300 (40.666666666666664%)
    4.0505759433333335 seconds/search at depth 6
    N: 41090377; E: 36098846; B: 3.736847072831139; Efficiency: 10.882614641186391

  5/6/14 After debugging bitboard-based SEE and adding separate move generator for check evasions:

    Total AI score: 116/300 (38.666666666666664%)
    0.13200174666666667 seconds/search at depth 4
    N: 1752853; E: 1655157; B: 2.3938543523329328; Efficiency: 16.15247252991145

    Total AI score: 120/300 (40.0%)
    1.5352190433333335 seconds/search at depth 6
    N: 17664038; E: 16447948; B: 2.7453770576053116; Efficiency: 14.569947646787172


  6/18/14 After debugging new check evasion generator and adding check evasions in q-search:

    Total AI score: 151/300 (50.33333333333333%)
    0.09957187666666666 seconds/search at depth 4
    43446.30376388407 NPS
    N: 1297809; E: 1102378; B: 2.725878243308102; Efficiency: 18.4649969076569

    Total AI score: 183/300 (61.0%)
    1.28480314 seconds/search at depth 6
    35598.44454718046 NPS
    N: 13721098; E: 11554007; B: 2.886366420591334; Efficiency: 21.13383788171387


  6/23/14 After replacing king capture for illegal move detection:

    Total AI score: 153/300 (51.0%)
    0.09075997333333334 seconds/search at depth 4
    47224.194865342986 NPS
    N: 1285820; E: 1042786; B: 2.677582689727886; Efficiency: 19.04703081464235

    Total AI score: 192/300 (64.0%)
    1.0958400433333333 seconds/search at depth 6
    40914.404986472284 NPS
    N: 13450693; E: 10786303; B: 2.8449238840475606; Efficiency: 22.49620819694664

  6/24/14 Using list-based SEE

    Total AI score: 155/300 (51.66666666666667%)
    0.08782717666666667 seconds/search at depth 4
    45529.33938101847 NPS
    N: 1199614; E: 961856; B: 2.596050596006821; Efficiency: 19.902026079976647

    Total AI score: 189/300 (63.0%)
    1.08711347 seconds/search at depth 6
    38462.829459743516 NPS
    N: 12544038; E: 9930262; B: 2.803167653559109; Efficiency: 22.474574405141464

  After debugging mobility eval:

    Total AI score: 154/300 (51.33333333333333%)
    0.08773904666666667 seconds/search at depth 4
    45119.89606755852 NPS
    N: 1187633; E: 952453; B: 2.59744649176565; Efficiency: 19.762999351889935

    Total AI score: 193/300 (64.33333333333333%)
    1.0722237533333334 seconds/search at depth 6
    38426.04668280588 NPS
    N: 12360396; E: 9759936; B: 2.794409189261938; Efficiency: 23.022159238720906

  6/26/14 After adding/tuning pawn structure evaluation:

    Total AI score: 157/300 (52.33333333333333%)
    0.08476663666666667 seconds/search at depth 4
    46198.915288644814 NPS
    N: 1174838; E: 943921; B: 2.592055922237782; Efficiency: 20.189893622415656

    Total AI score: 193/300 (64.33333333333333%)
    1.0438978633333333 seconds/search at depth 6
    38834.9423418528 NPS
    N: 12161914; E: 9607276; B: 2.8020829110455785; Efficiency: 22.95911126674256

  7/2/14 Using Alpha Beta only

    Total AI score: 171/300 (56.99999999999999%)
    0.11626264666666666 seconds/search at depth 4
    46312.868501129946 NPS
    N: 1615337; E: 1315964; B: 3.091565148481465; Efficiency: 18.43726308921474

    Total AI score: 225/300 (75.0%)
    1.0238726833333334 seconds/search at depth 6
    42826.4054510293 NPS
    N: 13154636; E: 10409996; B: 2.959282297528506; Efficiency: 25.343982918641288

    Total AI score: 251/300 (83.66666666666667%)
    2.9667398433333334 seconds/search at depth 7
    42949.2990270095 NPS
    N: 38225819; E: 29405041; B: 3.022920247497581; Efficiency: 27.67743103243534
    2014-07-02 13:54:12 -0400

    Total AI score: 263/300 (87.66666666666667%)
    7.771986543333334 seconds/search at depth 8
    39700.683338333605 NPS
    N: 92565953; E: 71412197; B: 2.8813371966744445; Efficiency: 30.425688033961794

Current Issues ----


To Do ----

  Avoid using pinned pieces in SEE and move generation.  Create routine that generates a mask of pinned pieces for color.

  Create separate move generator for giving check.

  Create readme


Possible Enhancements to Add ----

  Evaluation features:
  -Mobility
  -Pawn Structure 


  -Extend search on 'winning' promotions

  -At root, TT entries could be used for more accurate move ordering. Entry value would be used if available, 
   otherwise q-search could be used to establish an initial entry.  This would reduce branching factor and might improve strength by revealing beneficial lines that might otherwise have been cut off.






