
Move Generation benchmarking (4-ply maximal tree, 197742 nodes)
  baseline: 46.596299 seconds
  12/30/13: 35.324076 seconds
  1/5/14: 24.660283 seconds
  king safety 1/6/14: 25.213673 seconds
  legal copy/make: 33.068109 seconds
  incremental update: 9.475452 seconds
  iterative move gen and king saftey: 7.3749 seconds (26750 NPS)
  2/10/14 pseudolegal with king-loss checking: 3.419017 seconds (57835 NPS)

Search benchmarking (Win at Chess test suite):

  4/9/14 Baseline, ruby_only:

    Total AI score: 94/300 (31.333333333333336%)
    0.70220744 seconds/search at depth 4
    N: 1329152; E: 1261613; B: 2.975097929974432; Efficiency: 10.531866200990102

    Total AI score: 114/300 (38.0%)
    13.538827173333335 seconds/search at depth 6
    N: 25666314; E: 23056520; B: 3.597718489628773; Efficiency: 10.562249411548871


  5/4/14 After debugging attack.c

    Total AI score: 99/300 (33.0%)
    0.15935090666666668 seconds/search at depth 4
    N: 1913014; E: 1783802; B: 3.195094607130799; Efficiency: 10.328332665439932

    Total AI score: 122/300 (40.666666666666664%)
    4.0505759433333335 seconds/search at depth 6
    N: 41090377; E: 36098846; B: 3.736847072831139; Efficiency: 10.882614641186391

  5/6/14 After debugging bitboard-based SEE and adding separate move generator for check evasions:

    Total AI score: 116/300 (38.666666666666664%)
    0.13200174666666667 seconds/search at depth 4
    N: 1752853; E: 1655157; B: 2.3938543523329328; Efficiency: 16.15247252991145

    Total AI score: 120/300 (40.0%)
    1.5352190433333335 seconds/search at depth 6
    N: 17664038; E: 16447948; B: 2.7453770576053116; Efficiency: 14.569947646787172


  6/18/14 After debugging new check evasion generator and adding check evasions in q-search:

    Total AI score: 151/300 (50.33333333333333%)
    0.09957187666666666 seconds/search at depth 4
    43446.30376388407 NPS
    N: 1297809; E: 1102378; B: 2.725878243308102; Efficiency: 18.4649969076569

    Total AI score: 183/300 (61.0%)
    1.28480314 seconds/search at depth 6
    35598.44454718046 NPS
    N: 13721098; E: 11554007; B: 2.886366420591334; Efficiency: 21.13383788171387


  6/23/14 After replacing king capture for illegal move detection:

    Total AI score: 153/300 (51.0%)
    0.09075997333333334 seconds/search at depth 4
    47224.194865342986 NPS
    N: 1285820; E: 1042786; B: 2.677582689727886; Efficiency: 19.04703081464235

    Total AI score: 192/300 (64.0%)
    1.0958400433333333 seconds/search at depth 6
    40914.404986472284 NPS
    N: 13450693; E: 10786303; B: 2.8449238840475606; Efficiency: 22.49620819694664

  

    Total AI score: 157/300 (52.33333333333333%)
    0.08998390666666667 seconds/search at depth 4
    47208.51565605879 NPS
    N: 1274402; E: 1015252; B: 2.5676322092083987; Efficiency: 20.38194300011048

    Total AI score: 187/300 (62.33333333333333%)
    1.1243537133333332 seconds/search at depth 6
    39463.74064242429 NPS
    N: 13311361; E: 10527791; B: 2.7850868856837394; Efficiency: 22.38110906117404

Current Issues ----


To Do ----

  Avoid using pinned pieces in SEE and move generation.  Create routine that generates a mask of pinned pieces for color.

  Create separate move generator for giving check.

  Create readme


Possible Enhancements to Add ----

  Evaluation features:
  -Mobility
  -Pawn Structure 


  -Extend search on 'winning' promotions

  -At root, TT entries could be used for more accurate move ordering. Entry value would be used if available, 
   otherwise q-search could be used to establish an initial entry.  This would reduce branching factor and might improve strength by revealing beneficial lines that might otherwise have been cut off.






